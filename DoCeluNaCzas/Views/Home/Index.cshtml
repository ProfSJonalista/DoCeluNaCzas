@model DoCeluNaCzas.Models.ViewModels.Index.IndexModel

@{ViewBag.Title = "Home Page";}


@{
    Html.RenderPartial("Partials/_IndexMap", Model.MarkerArrayIndex);
}


<!--{
    Html.RenderPartial("Partials/_IndexForm", Model.SpotsListIndex);
}-->
@{var spot = Model; }

<div class="row">
    <div class="col-md-5 col-lg-4 col-xl-3">
        <div class="search-route-container">
            @using (Html.BeginForm("MainFormSearchRoute", "MainPageForm", FormMethod.Post))
            {

            <form id="routesForm" name="routesForm" autocomplete="false" class="form-group needs-validation">
                <div class="autocomplete">
                    <input id="inputFrom" type="text" name="inputFrom" placeholder="Od" class="form-control" required>
                </div>
                <div class="form-group">
                    @Html.DropDownList("SpotFrom", (SelectList)ViewBag.SpotsListIndex, "Od", new { @class = "form-control", id = "dropdownFrom", required = "required"})

                </div>
                <div class="autocomplete">
                    <input id="InputTo" type="text" name="inputTo" placeholder="Do" class="form-control" required>
                </div>
                <div class="form-group">
                    @Html.DropDownList("SpotTo", (SelectList)ViewBag.SpotsListIndex, "Do", new { @class = "form-control", id = "dropdownTo", required = "required" })

                </div>

                <div class="form-group">

                    <!--<input type="datetime-local" name="Time" class="form-control" id="datetime">-->
                    @Html.TextBoxFor(model => model.FromDate, new { type = "date", @class = "form-control date-box", @id = "currentDate", required = "required"  })
                    @Html.EditorFor(model => model.DateClock, new { htmlAttributes = new { @class = "clock form-control clock-box", @id = "time", required = "required"  } })


                </div>

                <div class="form-group">
                    <div class="btn-group-toggle radio-buttons" data-toggle="buttons">
                        <div class="btn btn-radio arrive-radiobutton">
                            Przyjazd @Html.RadioButton("Option", "Arrival", new { id = "arrivalRadioButton" })

                        </div>
                        <div class="btn btn-radio departure-radiobutton active">
                            Odjazd @Html.RadioButton("Option", "Departure", new { id = "departureRadioButton", @checked = true})

                        </div>
                    </div>
                </div>


                <input onclick="validateForm()" type="submit" name="button" class="btn btn-turquoise" id="searchRouteBtn" value="Szukaj" />
                <!--Html.DropDownListFor(x => x.SpotsListIndex, new SelectList(ViewBag.SpotsListIndexFrom, "Value", "Text")) -->
                <!-- Html.DropDownListFor(x => x.SpotsListIndex, new SelectList(ViewBag.SpotsListIndexTo, "Value", "Text")) -->
            </form>
            }
        </div>
    </div>
</div>

<script>


    var options = $('option');
    for (var i = 0; i < options.length; i++) {

        var txt = options[i].textContent;

        options[i].setAttribute('txt', txt);
        options[i].setAttribute('position', 0);
        options[i].addEventListener("mouseenter", () => {
            console.log(this);

        });

        //if (txt.length > 45) {
        //    txt = txt.substr(0, 45) + '...';
        //}
        options[i].innerHTML = txt;
    }

    $(".scroll_on_hover").mouseover(function () {
        $(this).removeClass("ellipsis");
        var maxscroll = $(this).width();
        var speed = maxscroll * 15;
        $(this).animate({
            scrollLeft: maxscroll
        }, speed, "linear");
    });

    $(".scroll_on_hover").mouseout(function () {
        $(this).stop();
        $(this).addClass("ellipsis");
        $(this).animate({
            scrollLeft: 0
        }, 'slow');
    });
    
    function autocomplete(inp, arr, selectId) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;

        inp.addEventListener('change', (event) => {
            setTimeout(() => {
                //console.log("c0");
                console.log(inp.value);
                var index = stops.indexOf(inp.value);
                console.log(index);
                if(index != -1) 
                    $('#' + selectId + ' option').eq(index).prop('selected', true);
            }, 200)

        });

        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            this.parentNode.appendChild(a);

            for (i = 0; i < arr.length; i++) {
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    b.addEventListener("click", function (e) {
                        inp.value = this.getElementsByTagName("input")[0].value;
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode == 38) { 
                currentFocus--;
                addActive(x);
            } else if (e.keyCode == 13) {
                e.preventDefault();
                if (currentFocus > -1) {
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    var stops = [];
    var options = Array.from($('#dropdownFrom')[0].options);
    options.forEach((e) => {
        stops.push(e.text);
    });
    autocomplete(document.getElementById("inputFrom"), stops, 'dropdownFrom');
    autocomplete(document.getElementById("InputTo"), stops, 'dropdownTo');

    /*Time and date */

    Date.prototype.toDateInputValue = (function () {
        var local = new Date(this);
        local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
        console.log(local.toJSON());
        return local.toJSON().slice(0, 10);
    });
    Date.prototype.toTimeInputValue = (function () {
        var local = new Date(this);
        local.setMinutes(this.getMinutes() - this.getTimezoneOffset());

        return local.toJSON().slice(11, 16);
    });
    $('#currentDate').val(new Date().toDateInputValue());
    $('#time').val(new Date().toTimeInputValue());

    
    $(document).ready(() => {

        $("form").submit(function () {
            console.log(stops);
            
            var userInput = document.getElementById('dropdownFrom').value;
            var index = stops.indexOf(inp.value);
            if (index == -1) {
                return false;
            }
            else {
                return true;
            }
        });

    });
    
    
</script>